#include <iostream>

class BinTreeNode {
public:
	BinTreeNode(int value) {
		this->value = value;
		this->left = NULL;
		this->right = NULL;
	}
	int value;
	BinTreeNode* left;
	BinTreeNode* right;

};

BinTreeNode* tree_insert(BinTreeNode* tree, int item) {
	if (tree == NULL)
		tree = new BinTreeNode(item);
	else
		if (item < tree->value)
			if (tree->left == NULL)
				tree->left = new BinTreeNode(item);
			else
				tree_insert(tree->left, item);
		else
			if (tree->right == NULL)
				tree->right = new BinTreeNode(item);
			else
				tree_insert(tree->right, item);
	return tree;

}

void postorder(BinTreeNode* tree) {
	if (tree->left != NULL)
		postorder(tree->left);
	if (tree->right != NULL)
		postorder(tree->right);
	std::cout << tree->value << std::endl;

}

void in_order(BinTreeNode* tree) {
	if (tree->left != NULL)
		in_order(tree->left);
	std::cout << tree->value << std::endl;
	if (tree->right != NULL)
		in_order(tree->right);
}

//Function to find the maximum in a given tree.
BinTreeNode* findTheMax(BinTreeNode* fM){
    while(fM->right != NULL){
        fM = fM->right;
    }
     return fM;
}

struct BinTreeNode* Delete(struct BinTreeNode *tree, int val){
   if(tree == NULL) return tree;
   else if(val < tree->value){
    tree->left = Delete(tree->left,val);
   }

   else if(val > tree->value){
    tree->right = Delete(tree->right,val);
   }

   else{
//Case 1: If there is no child

    if(tree->left == NULL && tree->right == NULL){
            //delete deallocates memory
        delete tree;
        tree = NULL;
    }

    //Case 2: If there is only one child
    else if(tree->left == NULL){
        struct BinTreeNode *temp = tree;
        tree = tree->right;
        delete temp;
    }

    else if(tree->right == NULL){
        struct BinTreeNode *temp = tree;
        tree = tree->left;
        delete temp;
    }
//if there is 2 children
    else{
        struct BinTreeNode* temp = findTheMax(tree->left);
        tree->value = temp->value;
        tree->left = Delete(tree->left, temp->value);
    }
   }

    return tree;
};

int main(int argc, char *argv[])
{
	BinTreeNode* t = tree_insert(0, 6);
	tree_insert(t, 10);
	tree_insert(t, 5);
	tree_insert(t, 2);
	tree_insert(t, 3);
	tree_insert(t, 4);
	tree_insert(t, 11);
	Delete(t, 0);
	in_order(t);

	return 0;
}
